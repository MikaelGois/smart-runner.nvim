name: CI

# Triggers the workflow on pushes and pull requests to the main branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  smart-runner-tests:
    runs-on: ubuntu-latest

    steps:
      # 1. Download the code from your repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install all language dependencies
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Set up Java and Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Install other language runtimes
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ lua5.4 rustc php-cli

      # 3. Install Neovim
      - name: Install Neovim
        run: |
          curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.appimage
          mv nvim-linux-x86_64.appimage nvim.appimage
          chmod u+x nvim.appimage
          ./nvim.appimage --appimage-extract
          sudo mv squashfs-root /usr/
          sudo ln -sf /usr/squashfs-root/usr/bin/nvim /usr/local/bin/nvim
      # 4. Run the tests!
      - name: Run tests
        env:
          SMART_RUNNER_CI: true
        run: |
          run_test() {
            local file_path=$1
            local expected_output=$2
            echo "--- Testing $file_path ---"

            local command_to_run=$(nvim --headless -u NONE \
              -c "set rtp+=." \
              -c "lua require('smart-runner').setup()" \
              -c "e $file_path" \
              -c "lua require('smart-runner').run()")
            
            echo "Command to execute: [${command_to_run}]"

            if [ -z "$command_to_run" ]; then
              echo "::error::Plugin did not return a command for $file_path"
              exit 1
            fi

            local output
            output=$(eval "$command_to_run" 2>&1)

            echo "Execution output:"
            echo "$output"

            if ! echo "$output" | grep -Fq "$expected_output"; then
              echo "::error::Test failed for $file_path. Expected output not found."
              exit 1
            fi
            echo "Success: Test passed for $file_path."
            echo "--------------------------"
          }

          chmod +x examples/HelloWorld.sh

          run_test "examples/HelloWorld.py" "Hello from Python!"
          run_test "examples/HelloWorld.js" "Hello from JavaScript!"
          run_test "examples/HelloWorld.go" "Hello from Go!"
          run_test "examples/HelloWorld.lua" "Hello from Lua!"
          run_test "examples/HelloWorld.php" "Hello from PHP!"
          run_test "examples/HelloWorld.sh" "Hello from Shell!"
          run_test "examples/HelloWorld.c" "Hello from C!"
          run_test "examples/HelloWorld.cpp" "Hello from C++!"
          run_test "examples/HelloWorld.rs" "Hello from Rust!"
          
          run_test "examples/projects/maven-hello-world/src/main/java/com/example/App.java" "Hello from Maven!"

          echo "All tests passed successfully!"
